#!/bin/bash
#================================================
# The stor script is the central controller
# for user interaction with all Stor components
#================================================

usage() {
cat << EOF
usage: $0 options

This script is used to run the Stor server and client. The -c or -s option must
be provided to start either the server or the client.

OPTIONS:
    -h      Show this message
    -c      Start the client
    -s      Start the server 
    -k      Kill the Stor server
    -x      Get the status of the Stor server

SERVER OPTIONS:
    -p      The host address to be used by the Pastry server. This is required
            when using the -s option. This can be either the hostname or ip address.
    -m 		The storage capacity for the server.
    -d 		The directory to be used for storage.
    -r 		The replication factor to be used.

CLIENT OPTIONS:
    -a      The action to take (PUT, GET, DELETE).
    -i      The file id to be used with a GET action. Required when using the GET action.
    -f      The filename used for the PUT action. Required when using the PUT action.
EOF
}

killserver() {
    JPS=$(jps -m | grep "Server")
    
    if [ -z "$JPS" ]; then
        echo "Stor server is not running"
        exit 1
    fi

    PID=$(echo $JPS | awk '{print $1}')
    IP=$(echo $JPS | awk '{print $3}')

    echo "Killing Server $IP"
    kill -9 $PID
}

CMD=
HOST_ADDR=
FILENAME=
FILEID=
ACTION=
CAPACITY=
STORDIR=
REPFACT=
while getopts "p:f:a:i:m:d:r:schkx" opt; do
  case $opt in
    h)
        usage
        exit 1
      ;;
    c)
        CMD=Client
      ;;
    s)
        CMD=Server
      ;;
    p)
        HOST_ADDR=$OPTARG
      ;; 
    f)
	    FILENAME=$OPTARG
      ;;
    a)
        ACTION=$OPTARG
      ;;
    i)
        FILEID=$OPTARG
      ;;
    k)
        killserver
        exit 0
      ;;
    x)
        CMD=Status
      ;; 
    m)
		CAPACITY=$OPTARG
	  ;;
	d)
		STORDIR=$OPTARG
	  ;;
	r)
		REPFACT=$OPTARG
	  ;;
    ?)
        usage
        exit 1
      ;;
  esac
done

if [[ -z $CMD ]]; then
     usage
     exit 1
fi

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
done
STOR="$( cd -P "$( dirname "$SOURCE" )"/.. && pwd )"

. $STOR/bin/env.sh

# Start server or client
if [ "$CMD" = "Client" ]; then
    echo "starting client!" >&2
    if [ "$ACTION" = "" ]; then
        echo "An action is required when running the Client."
        usage 
        exit 1
    fi

    if [ "$ACTION" = "PUT" ]; then  
        if [ "$FILENAME" = "" ]; then
            echo "A filename is required for PUT actions"
            usage
            exit 1
        fi

        $JAVA_HOME/bin/java -classpath $STOR/lib/stor-1.0.jar com.stor.client.Client PUT $FILENAME 

    elif [ "$ACTION" = "GET" ]; then
        if [ "$FILEID" = "" ]; then
            echo "A file Id is required when submitting a GET action"
            usage
            exit 1
        fi

        $JAVA_HOME/bin/java -classpath $STOR/lib/stor-1.0.jar com.stor.client.Client GET $FILEID
    else
        echo "$ACTION is not a recognized action"
        usage 
        exit 1
    fi	

elif [ "$CMD" = "Server" ]; then
    if [[ -z $HOST_ADDR ]]; then 
        echo "Missing required host address parameter"
        usage
        exit 1
    fi
    SYS_PROPS=
    if [[ ! -z $CAPACITY ]]; then
    	SYS_PROPS="$SYS_PROPS -DStor.Cap=$CAPACITY"
    fi

    if [[ ! -z $STORDIR ]]; then
    	SYS_PROPS="$SYS_PROPS -DStor.Age=$STORDIR"
   	fi

   	if [[ ! -z $REPFACT ]]; then
   		SYS_PROPS="$SYS_PROPS -DRepl.Fact=$REPFACT"
   	fi	

    echo "starting server using host address: $HOST_ADDR!" >&2
    $JAVA_HOME/bin/java -classpath $STOR/lib/stor-1.0.jar $SYS_PROPS com.stor.server.Server $HOST_ADDR &

elif [ "$CMD" = "Status" ]; then
    $JAVA_HOME/bin/java -classpath $STOR/lib/stor-1.0.jar com.stor.client.Client STATUS

else
    echo "Invalid Command: $CMD"
    usage
    exit 1
fi
